A) Verify your root file mounts the correct AuthProvider
Open /client/src/main.tsx (or index.tsx) and confirm:

diff
Copy
Edit
 import React from "react";
 import { createRoot } from "react-dom/client";
 import App from "./App";
 import "./index.css";
 import { ThemeProvider } from "./components/ThemeProvider";
 import { QueryClientProvider } from "@tanstack/react-query";
 import { queryClient } from "@/lib/queryClient";
-// import { AuthProvider } from "./lib/auth-simple";    // ❌ old
-import { AuthProvider } from "./lib/auth-simple";       // ❌ wrong
+import { AuthProvider } from "@/lib/auth";              // ✔ correct
 import { HelmetProvider } from "react-helmet-async";

 createRoot(document.getElementById("root")!).render(
   <React.StrictMode>
     <QueryClientProvider client={queryClient}>
       <HelmetProvider>
         <ThemeProvider>
-          <AuthProvider>    {/* was auth-simple */}
+          <AuthProvider>    {/* now using the real auth.tsx */}
             <App/>
           </AuthProvider>
         </ThemeProvider>
       </HelmetProvider>
     </QueryClientProvider>
   </React.StrictMode>
 );
If you see any import of auth-simple.tsx in any of your top-level provider code, replace it with import { AuthProvider } from "@/lib/auth". That ensures there’s exactly one AuthProvider in the entire app.

B) Make sure every call to useAuth() comes from the same file
Search your codebase for useAuth(). You should see something like:

ts
Copy
Edit
// client/src/lib/auth.tsx
export function useAuth() {
  const ctx = useContext(AuthContext);
  if (!ctx) throw new Error("useAuth must be used inside <AuthProvider>");
  return ctx;
}
And then in every other file—Navbar, pages, etc.—you should do:

ts
Copy
Edit
import { useAuth } from "@/lib/auth";
Check especially client/src/components/Navbar.tsx, client/src/pages/CreateListing.tsx, client/src/pages/SomeOtherProtectedPage.tsx, etc. If any component is doing:

ts
Copy
Edit
import { useAuth } from "@/lib/auth-simple";
or importing from ../hooks/useAuth that points to some old file, change it back to:

ts
Copy
Edit
import { useAuth } from "@/lib/auth";
C) Refactor any “redirect if not authenticated” out of render
Inside pages like CreateListing.tsx, Dashboard.tsx, or any route that should only be visible to logged-in users, move your redirect into a useEffect. For example:

tsx
Copy
Edit
import React, { useEffect } from "react";
import { useLocation } from "wouter";
import { useAuth } from "@/lib/auth";

export default function SomeProtectedPage() {
  const auth = useAuth();
  const [_, setLocation] = useLocation();

  // 1. Display a loading spinner while we’re verifying the session cookie:
  if (auth.isInitializing) {
    return <div>Loading…</div>;
  }

  // 2. Once initialization is complete, if not authenticated, navigate away:
  useEffect(() => {
    if (!auth.isAuthenticated) {
      setLocation("/login");
    }
  }, [auth.isAuthenticated, setLocation]);

  // 3. If not authenticated, return null so we don’t render the protected content:
  if (!auth.isAuthenticated) {
    return null;
  }

  // 4. Now we know auth.isAuthenticated is true → show the protected UI:
  return <div>Welcome to the protected area!</div>;
}
Do not ever call setLocation(...) or setState(...) directly inside the component’s main function body. Only do it inside a useEffect (or in event handlers). That will remove the React warning and let your context updates propagate cleanly.

